{"version":3,"sources":["components/BreakLength.js","components/SessionLength.js","components/Session.js","App.js","serviceWorker.js","index.js"],"names":["BreakLength","props","className","onClick","breaklength","decrement","breakInterval","increment","SessionLength","decrementSession","sessionInterval","incrementSession","Session","state","isSession","timerSecond","interval","play","bind","stop","refresh","decrementSecond","setInterval","this","setState","prevStateSecond","timer","onToggle","timerMinute","clearInterval","class","Component","App","breakLength","sessionlength","minutes","onDecrement","onIncrement","onSessionIncre","onSessionDecre","updateTimer","toggleInterval","onReset","prevState","prevMinutes","prevMin","breakTimer","reset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77e033df.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\n\r\nfunction BreakLength(props) {\r\n\r\nfunction decrementBreak(){\r\n    if(props.breaklength === 1){\r\n        return;\r\n    }\r\n    props.decrement()\r\n\r\n}\r\n\r\nfunction incrementBreak(){\r\n    if(props.breaklength === 60){\r\n        return;\r\n    }\r\n    props.increment()\r\n}\r\n        \r\n    \r\n\r\n    return (\r\n        <div className=\"centrado\">\r\n            <h3 className=\"fs-20\">BreakLength</h3>\r\n                <button className=\"btn\" onClick={decrementBreak}> - </button>\r\n                <span className=\"fs-20\"> {props.breakInterval} </span>\r\n                <button className=\"btn\" onClick={incrementBreak}> + </button>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default BreakLength;","import React from 'react';\r\n\r\nfunction SessionLength(props) {\r\n\r\n    function decrementSession(){\r\n        props.decrementSession()\r\n    }\r\n    \r\n    function incrementSession(){\r\n  \r\n        props.incrementSession()\r\n    }\r\n    \r\n    return (\r\n        <div className=\"centrado\">\r\n                <h3 className=\"fs-20\">Session Length</h3>\r\n                <button className=\"btn\" onClick={decrementSession}> - </button>\r\n                <span className=\"fs-20\"> {props.sessionInterval} </span>\r\n                <button className=\"btn\" onClick={incrementSession}> + </button>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default SessionLength;","import React, { Component } from 'react';\r\n\r\nclass Session extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            isSession: true,\r\n            timerSecond: 0,\r\n            interval: 0\r\n        };\r\n\r\n        this.play = this.play.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n        this.decrementSecond = this.decrementSecond.bind(this);\r\n    }\r\n\r\n        play(){\r\n            let interval = setInterval( this.decrementSecond, 1000);\r\n\r\n            this.setState({\r\n                interval: interval\r\n            });\r\n        }\r\n\r\n        decrementSecond(){\r\n            let prevStateSecond = this.state.timerSecond;\r\n\r\n            switch(this.state.timerSecond){\r\n                case 0:\r\n                    if(this.props.timer === 0){\r\n                        if(this.state.isSession){\r\n                            this.setState({\r\n                                isSession:false\r\n                            });\r\n                            this.props.onToggle(this.state.isSession)\r\n                        }else{\r\n                            this.setState({\r\n                                isSession: true\r\n                            });\r\n                            this.props.onToggle(this.state.isSession)\r\n                        }\r\n                    }\r\n                        \r\n                    \r\n\r\n                this.props.timerMinute()\r\n                    this.setState({\r\n                        timerSecond: 59\r\n                    });\r\n                    break;\r\n                default:\r\n                    this.setState({\r\n                            timerSecond : prevStateSecond - 1\r\n                        \r\n                    });\r\n\r\n            }\r\n        }\r\n\r\n        stop(){\r\n            clearInterval(this.state.interval)\r\n        }\r\n\r\n        refresh(){\r\n            this.stop();\r\n            \r\n\r\n            this.setState({\r\n                isSession:true\r\n            });\r\n\r\n            this.setState({\r\n                timerSecond: 0\r\n            });\r\n        }\r\n    \r\n    render() {\r\n        return (\r\n            <div class=\"centrado\">\r\n                <section className=\"mb-10\">\r\n                    <h4 className=\"fs-20\">{this.state.isSession === true ? \"Session\" : \"Break\"}</h4>\r\n                    <span className=\"fs-20\">{this.props.timer}</span>\r\n                    <span className=\"fs-20\">:</span>\r\n                    <span className=\"fs-20\">{\r\n                        this.state.timerSecond === 0\r\n                        ? \"00\"\r\n                        :this.state.timerSecond < 10\r\n                        ?\"0\"+ this.state.timerSecond\r\n                        :this.state.timerSecond\r\n                        }</span>\r\n                </section>\r\n                <section >\r\n                    <button className=\"btn\" onClick={this.play}>Play</button>\r\n                    <button className=\"btn\" onClick={this.stop}>Stop</button>\r\n                    <button className=\"btn\" onClick={this.refresh}>Refresh</button>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Session;","import React,{Component} from 'react';\nimport './App.css';\n\nimport BreakLength from './components/BreakLength';\nimport SessionLength from './components/SessionLength'\nimport Session from './components/Session'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakLength:5,\n      sessionlength:25,\n      minutes: 25\n      \n    };\n    this.onDecrement = this.onDecrement.bind(this);\n    this.onIncrement = this.onIncrement.bind(this);\n    this.onSessionIncre = this.onSessionIncre.bind(this);\n    this.onSessionDecre = this.onSessionDecre.bind(this);\n    this.updateTimer = this.updateTimer.bind(this);\n    this.toggleInterval = this.toggleInterval.bind(this);\n    this.onReset = this.onReset.bind(this);\n  }\n\n  onDecrement(){\n    let prevState = this.state.breakLength;\n    if(prevState === 1){     \n      this.setState({\n        breakLength: 1\n      });\n    } else {\n    this.setState({\n        breakLength: prevState - 1\n    }); \n    }\n  }\n\n  onIncrement(){\n    let prevState = this.state.breakLength;\n    if(prevState === 60){     \n      this.setState({\n        breakLength: 60\n      });\n    } else {\n    this.setState({\n        breakLength: prevState + 1\n    }); \n    }\n  }\n\n  onSessionDecre(){\n    let prevState = this.state.sessionlength;\n    let prevMinutes = this.state.minutes;\n    if(prevState === 1){     \n      this.setState({\n        sessionlength: 1\n      });\n    } else {\n    this.setState({\n        sessionlength: prevState - 1,\n        minutes: prevMinutes - 1\n    }); \n    }\n  }\n\n  onSessionIncre(){\n    let prevState = this.state.sessionlength;\n    let prevMinutes = this.state.minutes;\n    if(prevState === 1){     \n      this.setState({\n        sessionlength: 1\n      });\n    } else {\n    this.setState({\n        sessionlength: prevState + 1,\n        minutes: prevMinutes + 1\n    }); \n    }\n  }\n\n  updateTimer(){\n    let prevMin = this.state.minutes;\n\n    this.setState({\n      minutes: prevMin - 1\n    });\n  }\n\n  toggleInterval(isSession){\n    if(isSession){\n      this.setState({\n        minutes: this.state.sessionlength\n      });\n    } else {\n      this.setState({\n        minutes: this.state.breakLength\n      });\n    }\n  }\n  \n  onReset(){\n    this.setState({\n      minutes: this.state.sessionlength,\n      isSession:true\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"contenedor\">\n        <div className=\"idControl\">\n        <BreakLength  breakInterval={this.state.breakLength} decrement={this.onDecrement} increment={this.onIncrement}/>\n        <SessionLength  sessionInterval={this.state.sessionlength} incrementSession={this.onSessionIncre} decrementSession={this.onSessionDecre} />\n        </div>\n        <Session  timer={this.state.minutes} breakTimer={this.state.breakLength} timerMinute={this.updateTimer} \n           onToggle={this.toggleInterval} reset={this.onReset}/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}